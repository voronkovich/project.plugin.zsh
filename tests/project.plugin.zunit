#!/usr/bin/env zunit

@test 'Plugin should add hashes for projects dirs' {
    assert "p=${PROJECTS}" in "$(hash -d)"
    assert "pt=${PROJECTS_TMP}" in "$(hash -d)"
    assert "pr=${PROJECTS_RECIPES}" in "$(hash -d)"
}

@test 'Plugin should define completion for the command "p"' {
    assert "${_COMPDEF_ARGS[-1]}" same_as '_project project'
}

@test 'Command "project" shows an error when unknown option specified' {
    run project -u -h

    assert $state not_equal_to 0
    assert "${lines[1]}" same_as 'Unknown option: -u.'

    run project -t --unknown-option my-great-app

    assert $state not_equal_to 0
    assert "${lines[1]}" same_as 'Unknown option: --unknown-option.'
}

@test 'Command "project" shows a help message when help option specified' {
    run project -h

    assert $state equals 0
    assert "${lines[2]}" same_as "\e[32mProject manager\e[0m (\e[96m${PROJECTS}\e[0m)"


    run project --help

    assert $state equals 0
    assert "${lines[2]}" same_as "\e[32mProject manager\e[0m (\e[96m${PROJECTS}\e[0m)"
}

@test 'Command "project" goes to the projects directory when a project\'s name is not specified' {
    project

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS}"


    project -t

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS_TMP}"
}

@test 'Command "project" creates a new project\'s directory when the project is not already exist' {
    project my-cool-app

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS}/my-cool-app"


    project -t my-cool-tmp-app

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS_TMP}/my-cool-tmp-app"
}

@test 'Command "project" goes to the project\'s directory when the project is already exists' {
    mkdir -p "${PROJECTS}/my-app"

    project my-app

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS}/my-app"


    mkdir -p "${PROJECTS_TMP}/my-tmp-app"

    project -t my-tmp-app

    assert $? equals 0
    assert "$(pwd)" same_as "${PROJECTS_TMP}/my-tmp-app"
}

@test 'Command "project" clones a repo when a repo\'s url specified' {
    project myapp git@localhost
    assert "${_GIT_ARGS[-1]}" same_as "clone git@localhost ${PROJECTS}/myapp"


    project -t mytmpapp git@localhost
    assert "${_GIT_ARGS[-1]}" same_as "clone git@localhost ${PROJECTS_TMP}/mytmpapp"
}

@test 'Command "project" clones a repo when a project\'s name is recognized as a repo url' {
    project https://github.com/voronkovich/project.plugin.zsh.git
    assert "${_GIT_ARGS[-1]}" same_as "clone https://github.com/voronkovich/project.plugin.zsh.git ${PROJECTS}/project.plugin.zsh"


    project -t git@github.com:voronkovich/project.plugin.zsh.git
    assert "${_GIT_ARGS[-1]}" same_as "clone git@github.com:voronkovich/project.plugin.zsh.git ${PROJECTS_TMP}/project.plugin.zsh"
}

@test 'Command "project" runs a specified recipe' {
    run project -r foo my-app

    assert "${lines[1]}" same_as "foo"


    run project --temporary --recipe bar my-tmp-papp

    assert "${lines[1]}" same_as "bar"
}

@test 'Command "project" shows an error when the recipe value is not specified' {
    run project -r --temporary my-tmp-app

    assert $state not_equal_to 0
    assert "${lines[1]}" same_as 'Recipe option requires a value.'
}

@test 'Command "project" shows an error when the recipe is not exists or not executable' {
    run project -r unknown-recipe my-very-good-app

    assert $state not_equal_to 0
    assert "${lines[1]}" same_as 'Recipe "unknown-recipe" is not exist or not executable.'

    run project -r not-executable my-very-good-app

    assert $state not_equal_to 0
    assert "${lines[1]}" same_as 'Recipe "not-executable" is not exist or not executable.'
}

@test 'Command "project" doesn\'t run a recipe when the project name is not specified' {
    run project -r foo

    assert "${lines[1]}" same_as "You can't use the recipes when the project name is not specified."


    run project --temporary --recipe bar

    assert "${lines[1]}" same_as "You can't use the recipes when the project name is not specified."
}

@setup {
    _CWD="$(pwd)"

    PROJECTS="$(mktemp -d)"
    PROJECTS_TMP="$(mktemp -d)"
    PROJECTS_RECIPES="$(pwd)/tests/_fixtures/recipes"

    # stubs/spyes
    set -A _COMPDEF_ARGS
    compdef() {
        _COMPDEF_ARGS+="$@"
    }

    set -A _GIT_ARGS
    git() {
        _GIT_ARGS+="$@"
    }

    load ../project.plugin.zsh
}

@teardown {
    rm -rf "${PROJECTS}"
    rm -rf "${PROJECTS_TMP}"

    cd "${_CWD}"
}
